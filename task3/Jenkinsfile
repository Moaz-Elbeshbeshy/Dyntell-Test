pipeline {
    agent any

    environment {
        GCP_PROJECT_ID = 'm06308803865'
        BACKEND_IMAGE = "gcr.io/${GCP_PROJECT_ID}/task-manager-backend"
        FRONTEND_IMAGE = "gcr.io/${GCP_PROJECT_ID}/task-manager-frontend"
        TAG = 'latest'
        GCP_VM_SSH = 'moazelbeshbeshy@34.116.160.135'
        SSH_KEY_PATH = '/home/jenkins/.ssh/gcp-key.pem' 
        DOCKER_CONFIG = '/root/.docker' 
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Frontend Assets') {
            steps {
                dir('frontend') {
                    sh 'npm ci'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh """
                    docker build -t ${FRONTEND_IMAGE}:${TAG} .
                    """
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                    docker build -t ${BACKEND_IMAGE}:${TAG} .
                    """
                }
            }
        }

        stage('Authenticate with GCP') {
            steps {
                sh """
                gcloud auth activate-service-account --key-file=/tmp/gcloud-key.json    
                gcloud config set project ${GCP_PROJECT_ID}
                gcloud auth configure-docker --quiet
                """
            }
        }

        stage('Push Docker Images to GCR') {
            steps {
                sh """
                docker push ${FRONTEND_IMAGE}:${TAG}
                docker push ${BACKEND_IMAGE}:${TAG}
                """
            }
        }

        stage('Deploy on GCP VM') {
            steps {
                sh """
                ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no ${GCP_VM_SSH} << 'EOF'
                    # Clone the repo into a clean directory ~/project
                    if [ ! -d ~/project ]; then
                        git clone https://github.com/Moaz-Elbeshbeshy/Dyntell-Test.git ~/project
                    else
                        cd ~/project && git pull
                    fi

                    # Make sure deploy.sh is executable and run it
                    chmod +x ~/project/task3/deploy/deploy.sh
                    ~/project/task3/deploy/deploy.sh
                EOF
                """
            }
        }
    }

    post {
        success {
            echo '✅ Deployment succeeded!'
        }
        failure {
            echo '❌ Deployment failed.'
        }
    }
}
